Program even odd with the two threads : 
package com.test;

//1 2 3 4 5 6 7

public class EvenOddNumber {

	int count = 1;
	int max = 25;
	boolean isEven;

	public void printOdd() {

		synchronized (this) {

			while (count <= max) {

				while (!isEven) {
					System.out.println("Thread Name : " + Thread.currentThread().getName() + "Count : " + count);
					count++;
					isEven = true;
					notify();
				}
				try {
					wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}

	}

	public void printEven() {

		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		synchronized (this) {

			while (count <= max) {

				while (isEven) {
					System.out.println("Thread Name : " + Thread.currentThread().getName() + "Count : " + count);
					count++;
					isEven = false;
				    notify();	
				}
				
				try {
				wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}
		}
	}

	public static void main(String[] args) {

		EvenOddNumber obj = new EvenOddNumber();

		Thread oddThread = new Thread(() -> obj.printOdd());
		Thread evenThread = new Thread(() -> obj.printEven());
		oddThread.setName("Odd Thread");
		evenThread.setName("Even Thread");
		oddThread.start();
		evenThread.start();

	}
}
